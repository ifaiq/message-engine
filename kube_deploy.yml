# Deploy to Azure Kubernetes Service
# Build & Run application containerized application tests; Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - master

resources:
  - repo: self

variables:
  - group: XBackend-agents-vg
  - group: communication-vg
  - group: mongodb-vg
  - group: elasticsearch-vg
  # Variables
  # Container registry service connection established during pipeline creation
  - name: dockerRegistryServiceConnection
    value: "mezoHub-svcConn"
  - name: kubernetesServiceConnection
    value: "mezoKube-svcConn"
  - name: imageRepository
    value: "messagingbackend"
  - name: containerRegistry
    value: "mezohub.azurecr.io"
  - name: dockerfilePath
    value: "**/Dockerfile"
  - name: tag
    value: "$(build.buildNumber)_$(Build.BuildId)"
  - name: imagePullSecret
    value: "mezohub-auth-backx"

  # Name of the new namespace being created to deploy the PR changes.
  - name: k8sNamespaceForPR
    value: "pr-$(System.PullRequest.PullRequestId)"
  - name: azureAdObjectId
    value: 553b5911-e4c0-4633-b584-a30bd8296a42

stages:
  - stage: Validate
    displayName: Validate Stage
    jobs:
      - job: Build
        condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
        displayName: Validate
        pool:
          name: $(AKS_Validate)
          vmImage: $(AKS_Validate_VM)
        steps:
          - checkout: self
            submodules: true
          - task: DockerCompose@0
            displayName: Run a Docker Compose command
            inputs:
              action: "Run a Docker Compose command"
              dockerComposeCommand: "up --build --abort-on-container-exit"
              dockerComposeFile: docker-compose.yml
              projectName: $(Build.Repository.Name)
              dockerComposeFileArgs: |
                sendGridApiKey=$(sendgrid_key)
                termiiApiKey=$(termii_key)
                firebaseKey=$(firebase_key)
                weApiPassword=$(new_we_api_password)
                twilioSID=$(twilioSID)
                twilioSIDTest=$(twilioSIDTest)
                twilioApiKey=$(twilioApiKey)
                twilioApiKeyTest=$(twilioApiKeyTest)
                twilioApiSecret=$(twilioApiSecret)
                twilioApiSecretTest=$(twilioApiSecretTest)
                apmApiKey=$(apmApiKey)
              qualifyImageNames: true
          - task: PublishTestResults@2
            displayName: "Publish Test Results"
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "JUnit"
              searchFolder: $(Build.Repository.LocalPath)/test
              testResultsFiles: junit.xml

          - task: PublishCodeCoverageResults@1
            condition: succeededOrFailed()
            displayName: "Publish Code Coverage Results"
            inputs:
              codeCoverageTool: "Cobertura"
              summaryFileLocation: "$(Build.Repository.LocalPath)/coverage/cobertura-coverage.xml"
              reportDirectory: "$(Build.Repository.LocalPath)/coverage/"

          - task: CmdLine@2
            displayName: "Clean up docker"
            condition: |
              and
              (
                succeededOrFailed(),
                eq(variables['AKS_Validate'],'LinuxSelfHosted')
              )
            inputs:
              script: |
                # Clean up docker
                docker ps --filter name=node-app* -aq | xargs docker rm -f
                docker rmi -f $(docker images | grep 'app')
                docker rmi -f $(docker images | grep 'test')
                docker rm -f mongo
                docker rmi -f mongo node
                docker image prune -f
  - stage: Build
    displayName: Build stage
    dependsOn: Validate

    jobs:
      - job: Build
        displayName: Build Container
        pool:
          name: $(AKS_Build)
          vmImage: $(AKS_Build_VM)
        steps:
          - checkout: self
            submodules: true
          - task: DownloadSecureFile@1
            name: mongoCA
            displayName: "Download Mongo Root CA certificate"
            inputs:
              secureFile: "mongoCA.pem"

          - task: DownloadSecureFile@1
            name: client
            displayName: "Download Mongo client certificate"
            inputs:
              secureFile: "client.pem"

          - task: DownloadSecureFile@1
            name: esClient
            displayName: "Download Elastic client certificate"
            inputs:
              secureFile: "es-client.pem"

          - task: DownloadSecureFile@1
            name: esClientCA
            displayName: "Download Elastic CA client certificate"
            inputs:
              secureFile: "es-client-ca.cer"
          - script: |
              echo Copying Certificates to the source directory...
              cp -f $(mongoCA.secureFilePath) $(Build.SourcesDirectory)/.
              cp -f $(client.secureFilePath) $(Build.SourcesDirectory)/.
              cp -f $(esClient.secureFilePath) $(Build.SourcesDirectory)/.
              cp -f $(esClientCA.secureFilePath) $(Build.SourcesDirectory)/.

          - task: Docker@2
            displayName: Build the docker image
            inputs:
              command: "build"
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: $(tag)
              arguments: "--build-arg db_pwd_prod=$(db_pwd_prod) --build-arg db_pwd_dev=$(db_pwd_dev) --build-arg DBPW_CLOUD_development=$(DBPW_CLOUD_development) --build-arg DBPW_CLOUD_production=$(DBPW_CLOUD_production) --build-arg es_pwd_dev=$(es_pwd_dev) --build-arg es_pwd_prod=$(es_pwd_prod) --build-arg sendgrid_key=$(sendgrid_key) --build-arg termii_key=$(termii_key) --build-arg we_api_password=$(new_we_api_password) --build-arg firebase_key=$(firebase_key) --build-arg twilioApiSecret=$(twilioApiSecret) --build-arg twilioApiKey=$(twilioApiKey) --build-arg twilioSID=$(twilioSID) --build-arg twilioApiSecretTest=$(twilioApiSecretTest) --build-arg twilioApiKeyTest=$(twilioApiKeyTest) --build-arg twilioSIDTest=$(twilioSIDTest) --build-arg apmApiKey=$(apmApiKey)"
          - task: Docker@2
            displayName: Push the image to container registry
            inputs:
              command: "push"
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: $(tag)
          - upload: manifests
            artifact: manifests

  - stage: Deploy_dev
    displayName: Deploy dev stage
    dependsOn: Build

    jobs:
      - deployment: Deploy
        condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
        displayName: Deploy XBack Dev
        pool:
          name: $(AKS_Deploy)
          vmImage: $(AKS_Deploy_VM)
        environment: "Development.dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubernetesManifest@0
                  displayName: Create imagePullSecret
                  inputs:
                    action: createSecret
                    secretName: $(imagePullSecret)
                    dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
                    kubernetesServiceConnection: $(kubernetesServiceConnection)
                    secretType: "dockerRegistry"
                    namespace: "dev"

                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    action: deploy
                    namespace: "dev"
                    kubernetesServiceConnection: $(kubernetesServiceConnection)
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment-dev.yml
                      $(Pipeline.Workspace)/manifests/service-dev.yml
                    imagePullSecrets: |
                      $(imagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(tag)

      - deployment: DeployPullRequest
        displayName: Deploy Pull request
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
        pool:
          name: $(AKS_Deploy)
          vmImage: $(AKS_Deploy_VM)
        environment: "Development.$(k8sNamespaceForPR)"
        strategy:
          runOnce:
            deploy:
              steps:
                - reviewApp: dev

                - task: Kubernetes@1
                  displayName: "Create a new namespace for the pull request"
                  inputs:
                    connectionType: "Kubernetes Service Connection"
                    kubernetesServiceEndpoint: $(kubernetesServiceConnection)
                    command: apply
                    useConfigurationFile: true
                    inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

                - task: Kubernetes@1
                  name: CreateRoleBinding
                  continueOnError: true
                  displayName: "Create namespace rolebinding"
                  inputs:
                    connectionType: "Kubernetes Service Connection"
                    kubernetesServiceEndpoint: $(kubernetesServiceConnection)
                    command: create
                    namespace: $(k8sNamespaceForPR)
                    arguments: rolebinding dev-user-access --clusterrole=admin --group=$(azureAdObjectId) --namespace=$(k8sNamespaceForPR)

                - task: KubernetesManifest@0
                  displayName: Create imagePullSecret
                  inputs:
                    action: createSecret
                    secretName: $(imagePullSecret)
                    namespace: $(k8sNamespaceForPR)
                    dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
                    kubernetesServiceConnection: $(kubernetesServiceConnection)
                    secretType: "dockerRegistry"

                - task: KubernetesManifest@0
                  displayName: Deploy to the new namespace in the Kubernetes cluster
                  inputs:
                    action: deploy
                    namespace: $(k8sNamespaceForPR)
                    kubernetesServiceConnection: $(kubernetesServiceConnection)
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment-PR.yml
                      $(Pipeline.Workspace)/manifests/service-PR.yml
                    imagePullSecrets: |
                      $(imagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(tag)

                - task: Kubernetes@1
                  name: get
                  displayName: "Get services in the new namespace"
                  continueOnError: true
                  inputs:
                    connectionType: "Kubernetes Service Connection"
                    kubernetesServiceEndpoint: $(kubernetesServiceConnection)
                    command: get
                    namespace: $(k8sNamespaceForPR)
                    arguments: svc
                    outputFormat: jsonpath='http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'

                # Getting the IP of the deployed service and writing it to a variable for posing comment
                - script: |
                    url="$(get.KubectlOutput)"
                    message="Your review app has been deployed"
                    if [ ! -z "$url" -a "$url" != "http://:" ]
                    then
                      message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps) about how to test and provide feedback for the app."
                    fi
                    echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message"

  - stage: Deploy_prod
    displayName: Deploy production stage
    dependsOn: Build

    jobs:
      - deployment: Deploy
        condition: succeeded()
        displayName: Deploy XBack Production
        pool:
          name: $(AKS_Deploy)
          vmImage: $(AKS_Deploy_VM)
        environment: "Production.production"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubernetesManifest@0
                  displayName: Create imagePullSecret
                  inputs:
                    action: createSecret
                    secretName: $(imagePullSecret)
                    dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
                    kubernetesServiceConnection: $(kubernetesServiceConnection)
                    secretType: "dockerRegistry"
                    namespace: "production"

                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    action: deploy
                    namespace: "production"
                    kubernetesServiceConnection: $(kubernetesServiceConnection)
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment.yml
                      $(Pipeline.Workspace)/manifests/service.yml
                    imagePullSecrets: |
                      $(imagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(tag)
